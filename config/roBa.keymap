#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        lc {
            bindings = <&mkp LCLK>;
            key-positions = <18 19>;
        };

        rc {
            bindings = <&mkp RCLK>;
            key-positions = <19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                  &kp T                                                       &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F                  &kp G            &kp SPACE                   &kp BACKSLASH  &kp H            &kp J  &kp K      &kp L    &kp SEMICOLON
&kp Z      &kp X         &kp C         &kp V                  &kp B            &lt_to_layer_0 6 TAB        &kp SQT        &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 LEFT  &mt LSHFT SPACE  &lt_to_layer_0 5 RIGHT      &kp BACKSPACE  &mt RCTRL ENTER                             &kp RSHFT
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2    &kp F3     &kp F4   &kp F5                      &kp F6  &kp F7    &kp F8    &kp F9     &kp F10
&trans  &trans    &kp PG_UP  &trans   &trans  &trans      &trans  &trans  &trans    &kp UP    &trans     &kp F11
&trans  &kp HOME  &kp PG_DN  &kp END  &trans  &trans      &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp F12
&trans  &trans    &trans     &trans   &trans  &trans      &trans  &trans                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        NUM {
            bindings = <
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp N5                            &kp NUMBER_6   &kp N7          &kp N8           &kp N9                &kp N0
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR      &kp PERCENT  &trans      &trans   &kp CARET      &kp AMPERSAND   &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp GRAVE        &kp TILDE     &kp MINUS     &kp UNDERSCORE  &kp EQUAL    &trans      &trans   &kp PLUS       &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&trans           &trans        &trans        &trans          &trans       &trans      &kp DEL  &kp LC(SPACE)                                                         &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&kp F1  &kp F2    &kp F3     &kp F4   &kp F5                                     &kp F6  &kp F7    &kp F8    &kp F9     &kp F10
&trans  &trans    &kp PG_UP  &trans   &trans  &trans          &kp C_VOLUME_UP    &trans  &trans    &kp UP    &trans     &kp F11
&trans  &kp HOME  &kp PG_DN  &kp END  &trans  &kp ESCAPE      &kp C_VOLUME_DOWN  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp F12
&trans  &trans    &trans     &trans   &trans  &trans          &trans             &trans                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
